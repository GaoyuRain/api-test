"""author :rainDate : 2020/07/17Description :测试数据"""import osimport randomimport yamlimport constantfrom constant import BASE_DIRclass DataUtils:    @staticmethod    def get_yaml_data(file_name):        file_path = BASE_DIR + os.sep + 'data_fj' + os.sep + file_name        # print(file_path)        with open(file_path, 'r') as f:            return yaml.safe_load(f)    @staticmethod    def set_data(data, filename):        file_path = BASE_DIR + os.sep + 'data_fj' + os.sep + filename        with open(file_path, 'w', encoding='UTF-8') as f:            yaml.dump(data, f, allow_unicode=True, encoding='UTF-8')    @staticmethod    def set_user_info(data):        """写入用户信息"""        file_path = BASE_DIR + os.sep + 'data_fj' + os.sep + 'gift_list.yaml'        with open(file_path, 'w', encoding='UTF-8') as f:            yaml.dump(data.get('data_fj').get('list'), f, allow_unicode=True, encoding='UTF-8')    @staticmethod    def get_user_info_auto():        """获取用户信息 api自动化脚本"""        if constant.user_info is not None:            return constant.user_info        else:            data = DataUtils.get_yaml_data(constant.uinfo_api_auto_file).get("token")            constant.user_info = {"token": data}            return constant.user_info    @staticmethod    def get_user_info_pressure():        """获取用户信息 压测脚本调用"""        if constant.user_info is not None:            token = random.choice(constant.user_info).get("token")        else:            print('none')            data = DataUtils.get_yaml_data(constant.uinfo_api_pressure_file)            token = random.choice(data).get("token")            constant.user_info = data        return {"token": token}    @staticmethod    def get_login_data():        data = DataUtils.get_yaml_data('t01_login_api_data.yaml')        data1 = data.values()        return [x.values() for x in data1]    # @staticmethod    # def get_user_token(type):    #     '''    #     获取本地存储的用户token  备注：if分支过多可能会影响压测脚本运行性能，暂时不使用    #     :param type: 压测 ：pressure ，api自动化：auto    #     :return:    #     '''    #     if constant.user_info is not None:    #         if 'auto'.__eq__(type):    #             return constant.user_info    #         else:    #             token = random.choice(constant.user_info).get('token')    #             return {"token": token}    #     else:    #         if 'auto'.__eq__(type):    #             token = DataUtils.get_yaml_data(constant.uinfo_api_auto_path).get('token')    #             constant.user_info = {"token": token}    #             return constant.user_info    #         else:    #             print('none')    #             data = DataUtils.get_yaml_data(constant.uinfo_api_pressure_file)    #             token = random.choice(data).get('token')    #             constant.user_info = data    #             return {"token": token}if __name__ == '__main__':    # DataUtils.set_gift_list_data()    # print(DataUtils.get_user_info())    print(DataUtils.get_login_data())